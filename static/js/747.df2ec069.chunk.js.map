{"version":3,"file":"static/js/747.df2ec069.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/construct.js","../node_modules/native-file-system-adapter/src/adapters/sandbox.js"],"sourcesContent":["import setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","/* global Blob, DOMException */\n\nimport { errors } from '../util.js'\n\nconst { DISALLOWED } = errors\n\nclass Sink {\n  /**\n   * @param {FileWriter} writer\n   * @param {FileEntry} fileEntry\n   */\n  constructor (writer, fileEntry) {\n    this.writer = writer\n    this.fileEntry = fileEntry\n  }\n\n  /**\n   * @param {BlobPart | Object} chunk\n   */\n  async write (chunk) {\n    if (typeof chunk === 'object') {\n      if (chunk.type === 'write') {\n        if (Number.isInteger(chunk.position) && chunk.position >= 0) {\n          this.writer.seek(chunk.position)\n          if (this.writer.position !== chunk.position) {\n            await new Promise((resolve, reject) => {\n              this.writer.onwriteend = resolve\n              this.writer.onerror = reject\n              this.writer.truncate(chunk.position)\n            })\n            this.writer.seek(chunk.position)\n          }\n        }\n        if (!('data' in chunk)) {\n          throw new DOMException('Failed to execute \\'write\\' on \\'UnderlyingSinkBase\\': Invalid params passed. write requires a data argument', 'SyntaxError')\n        }\n        chunk = chunk.data\n      } else if (chunk.type === 'seek') {\n        if (Number.isInteger(chunk.position) && chunk.position >= 0) {\n          this.writer.seek(chunk.position)\n          if (this.writer.position !== chunk.position) {\n            throw new DOMException('seeking position failed', 'InvalidStateError')\n          }\n          return\n        } else {\n          throw new DOMException('Failed to execute \\'write\\' on \\'UnderlyingSinkBase\\': Invalid params passed. seek requires a position argument', 'SyntaxError')\n        }\n      } else if (chunk.type === 'truncate') {\n        return new Promise(resolve => {\n          if (Number.isInteger(chunk.size) && chunk.size >= 0) {\n            this.writer.onwriteend = evt => resolve()\n            this.writer.truncate(chunk.size)\n          } else {\n            throw new DOMException('Failed to execute \\'write\\' on \\'UnderlyingSinkBase\\': Invalid params passed. truncate requires a size argument', 'SyntaxError')\n          }\n        })\n      }\n    }\n    await new Promise((resolve, reject) => {\n      this.writer.onwriteend = resolve\n      this.writer.onerror = reject\n      this.writer.write(new Blob([chunk]))\n    })\n  }\n\n  close () {\n    return new Promise(this.fileEntry.file.bind(this.fileEntry))\n  }\n}\n\nexport class FileHandle {\n  /** @param {FileEntry} file */\n  constructor (file, writable = true) {\n    this.file = file\n    this.kind = 'file'\n    this.writable = writable\n    this.readable = true\n  }\n\n  get name () {\n    return this.file.name\n  }\n\n  /**\n   * @param {{ file: { toURL: () => string; }; }} other\n   */\n  isSameEntry (other) {\n    return this.file.toURL() === other.file.toURL()\n  }\n\n  /** @return {Promise<File>} */\n  getFile () {\n    return new Promise(this.file.file.bind(this.file))\n  }\n\n  /** @return {Promise<Sink>} */\n  createWritable (opts) {\n    if (!this.writable) throw new DOMException(...DISALLOWED)\n\n    return new Promise((resolve, reject) =>\n      this.file.createWriter(fileWriter => {\n        if (opts.keepExistingData === false) {\n          fileWriter.onwriteend = evt => resolve(new Sink(fileWriter, this.file))\n          fileWriter.truncate(0)\n        } else {\n          resolve(new Sink(fileWriter, this.file))\n        }\n      }, reject)\n    )\n  }\n}\n\nexport class FolderHandle {\n  /** @param {DirectoryEntry} dir */\n  constructor (dir, writable = true) {\n    this.dir = dir\n    this.writable = writable\n    this.readable = true\n    this.kind = 'directory'\n    this.name = dir.name\n  }\n\n  /** @param {FolderHandle} other */\n  isSameEntry (other) {\n    return this.dir.fullPath === other.dir.fullPath\n  }\n\n  /** @returns {AsyncGenerator<[string, FileHandle | FolderHandle]>} */\n  async * entries () {\n    const reader = this.dir.createReader()\n    const entries = await new Promise(reader.readEntries.bind(reader))\n    for (const x of entries) {\n      yield [x.name, x.isFile ? new FileHandle(x, this.writable) : new FolderHandle(x, this.writable)]\n    }\n  }\n\n  /**\n   * @param {string} name\n   * @param {{ create: boolean; }} opts\n   * @returns {Promise<FolderHandle>}\n   */\n  getDirectoryHandle (name, opts) {\n    return new Promise((resolve, reject) => {\n      this.dir.getDirectory(name, opts, dir => {\n        resolve(new FolderHandle(dir))\n      }, reject)\n    })\n  }\n\n  /**\n   * @param {string} name\n   * @param {{ create: boolean; }} opts\n   * @returns {Promise<FileHandle>}\n   */\n  getFileHandle (name, opts) {\n    return new Promise((resolve, reject) =>\n      this.dir.getFile(name, opts, file => resolve(new FileHandle(file)), reject)\n    )\n  }\n\n  /**\n   * @param {string} name\n   * @param {{ recursive: boolean; }} opts\n   */\n  async removeEntry (name, opts) {\n    /** @type {Error|FolderHandle|FileHandle} */\n    const entry = await this.getDirectoryHandle(name, { create: false }).catch(err =>\n      err.name === 'TypeMismatchError' ? this.getFileHandle(name, { create: false }) : err\n    )\n\n    if (entry instanceof Error) throw entry\n\n    return new Promise((resolve, reject) => {\n      if (entry instanceof FolderHandle) {\n        opts.recursive\n          ? entry.dir.removeRecursively(() => resolve(), reject)\n          : entry.dir.remove(() => resolve(), reject)\n      } else if (entry.file) {\n        entry.file.remove(() => resolve(), reject)\n      }\n    })\n  }\n}\n\nexport default (opts = {}) => new Promise((resolve, reject) =>\n  window.webkitRequestFileSystem(\n    opts._persistent, 0,\n    e => resolve(new FolderHandle(e.root)),\n    reject\n  )\n)\n"],"names":["_construct","Parent","args","Class","Reflect","construct","a","push","apply","instance","Function","bind","prototype","arguments","DISALLOWED","errors","Sink","writer","fileEntry","this","chunk","type","Number","isInteger","position","seek","Promise","resolve","reject","onwriteend","onerror","truncate","DOMException","data","size","evt","write","Blob","file","FileHandle","writable","kind","readable","name","other","toURL","opts","createWriter","fileWriter","keepExistingData","FolderHandle","dir","fullPath","reader","createReader","readEntries","entries","x","isFile","getDirectory","getFile","getDirectoryHandle","create","catch","err","getFileHandle","entry","Error","recursive","removeRecursively","remove","window","webkitRequestFileSystem","_persistent","e","root"],"sourceRoot":""}