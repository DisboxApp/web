{"version":3,"file":"static/js/631.e0b9cfbd.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/construct.js","../node_modules/native-file-system-adapter/src/adapters/downloader.js","../node_modules/native-file-system-adapter/src/util.js"],"sourcesContent":["import setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","/* global Blob, DOMException, Response, MessageChannel */\n\nimport { errors } from '../util.js'\nimport config from '../config.js'\n\nconst {\n  WritableStream,\n  TransformStream,\n  DOMException,\n  Blob\n} = config\n\nconst { GONE } = errors\n// @ts-ignore\nconst isSafari = /constructor/i.test(window.HTMLElement) || window.safari || window.WebKitPoint\n\nexport class FileHandle {\n  constructor (name = 'unkown') {\n    this.name = name\n    this.kind = 'file'\n  }\n\n  async getFile () {\n    throw new DOMException(...GONE)\n  }\n\n  async isSameEntry(other) {\n    return this === other\n  }\n\n  /**\n   * @param {object} [options={}]\n   */\n  async createWritable (options = {}) {\n    const sw = await navigator.serviceWorker?.getRegistration()\n    const link = document.createElement('a')\n    const ts = new TransformStream()\n    const sink = ts.writable\n\n    link.download = this.name\n\n    if (isSafari || !sw) {\n      /** @type {Blob[]} */\n      let chunks = []\n      ts.readable.pipeTo(new WritableStream({\n        write (chunk) {\n          chunks.push(new Blob([chunk]))\n        },\n        close () {\n          const blob = new Blob(chunks, { type: 'application/octet-stream; charset=utf-8' })\n          chunks = []\n          link.href = URL.createObjectURL(blob)\n          link.click()\n          setTimeout(() => URL.revokeObjectURL(link.href), 10000)\n        }\n      }))\n    } else {\n      const { writable, readablePort } = new RemoteWritableStream(WritableStream)\n      // Make filename RFC5987 compatible\n      const fileName = encodeURIComponent(this.name).replace(/['()]/g, escape).replace(/\\*/g, '%2A')\n      const headers = {\n        'content-disposition': \"attachment; filename*=UTF-8''\" + fileName,\n        'content-type': 'application/octet-stream; charset=utf-8',\n        ...(options.size ? { 'content-length': options.size } : {})\n      }\n\n      const keepAlive = setTimeout(() => sw.active.postMessage(0), 10000)\n\n      ts.readable.pipeThrough(new TransformStream({\n        transform (chunk, ctrl) {\n          if (chunk instanceof Uint8Array) return ctrl.enqueue(chunk)\n          const reader = new Response(chunk).body.getReader()\n          const pump = _ => reader.read().then(e => e.done ? 0 : pump(ctrl.enqueue(e.value)))\n          return pump()\n        }\n      })).pipeTo(writable).finally(() => {\n        clearInterval(keepAlive)\n      })\n\n      // Transfer the stream to service worker\n      sw.active.postMessage({\n        url: sw.scope + fileName,\n        headers,\n        readablePort\n      }, [readablePort])\n\n      // Trigger the download with a hidden iframe\n      const iframe = document.createElement('iframe')\n      iframe.hidden = true\n      iframe.src = sw.scope + fileName\n      document.body.appendChild(iframe)\n    }\n\n    return sink.getWriter()\n  }\n}\n\nconst WRITE = 0\nconst PULL = 0\nconst ERROR = 1\nconst ABORT = 1\nconst CLOSE = 2\n\nclass MessagePortSink {\n  /** @param {MessagePort} port */\n  constructor (port) {\n    port.onmessage = event => this._onMessage(event.data)\n    this._port = port\n    this._resetReady()\n  }\n\n  start (controller) {\n    this._controller = controller\n    // Apply initial backpressure\n    return this._readyPromise\n  }\n\n  write (chunk) {\n    const message = { type: WRITE, chunk }\n\n    // Send chunk\n    this._port.postMessage(message, [chunk.buffer])\n\n    // Assume backpressure after every write, until sender pulls\n    this._resetReady()\n\n    // Apply backpressure\n    return this._readyPromise\n  }\n\n  close () {\n    this._port.postMessage({ type: CLOSE })\n    this._port.close()\n  }\n\n  abort (reason) {\n    this._port.postMessage({ type: ABORT, reason })\n    this._port.close()\n  }\n\n  _onMessage (message) {\n    if (message.type === PULL) this._resolveReady()\n    if (message.type === ERROR) this._onError(message.reason)\n  }\n\n  _onError (reason) {\n    this._controller.error(reason)\n    this._rejectReady(reason)\n    this._port.close()\n  }\n\n  _resetReady () {\n    this._readyPromise = new Promise((resolve, reject) => {\n      this._readyResolve = resolve\n      this._readyReject = reject\n    })\n    this._readyPending = true\n  }\n\n  _resolveReady () {\n    this._readyResolve()\n    this._readyPending = false\n  }\n\n  _rejectReady (reason) {\n    if (!this._readyPending) this._resetReady()\n    this._readyPromise.catch(() => {})\n    this._readyReject(reason)\n    this._readyPending = false\n  }\n}\n\nclass RemoteWritableStream {\n  constructor (WritableStream) {\n    const channel = new MessageChannel()\n    this.readablePort = channel.port1\n    this.writable = new WritableStream(\n      new MessagePortSink(channel.port2)\n    )\n  }\n}\n","export const errors = {\n  INVALID: ['seeking position failed.', 'InvalidStateError'],\n  GONE: ['A requested file or directory could not be found at the time an operation was processed.', 'NotFoundError'],\n  MISMATCH: ['The path supplied exists, but was not an entry of requested type.', 'TypeMismatchError'],\n  MOD_ERR: ['The object can not be modified in this way.', 'InvalidModificationError'],\n  SYNTAX: m => [`Failed to execute 'write' on 'UnderlyingSinkBase': Invalid params passed. ${m}`, 'SyntaxError'],\n  SECURITY: ['It was determined that certain files are unsafe for access within a Web application, or that too many calls are being made on file resources.', 'SecurityError'],\n  DISALLOWED: ['The request is not allowed by the user agent or the platform in the current context.', 'NotAllowedError']\n}\n\nexport const config = {\n  writable: globalThis.WritableStream\n}\n\nexport async function fromDataTransfer (entries) {\n  console.warn('deprecated fromDataTransfer - use `dt.items[0].getAsFileSystemHandle()` instead')\n  const [memory, sandbox, fs] = await Promise.all([\n    import('./adapters/memory.js'),\n    import('./adapters/sandbox.js'),\n    import('./FileSystemDirectoryHandle.js')\n  ])\n\n  const folder = new memory.FolderHandle('', false)\n  folder._entries = entries.map(entry => entry.isFile\n    ? new sandbox.FileHandle(entry, false)\n    : new sandbox.FolderHandle(entry, false)\n  )\n\n  return new fs.FileSystemDirectoryHandle(folder)\n}\n\nexport async function getDirHandlesFromInput (input) {\n  const { FolderHandle, FileHandle } = await import('./adapters/memory.js')\n  const { FileSystemDirectoryHandle } = await import('./FileSystemDirectoryHandle.js')\n\n  const files = Array.from(input.files)\n  const rootName = files[0].webkitRelativePath.split('/', 1)[0]\n  const root = new FolderHandle(rootName, false)\n\n  files.forEach(file => {\n    const path = file.webkitRelativePath.split('/')\n    path.shift()\n    const name = path.pop()\n\n    const dir = path.reduce((dir, path) => {\n      if (!dir._entries[path]) dir._entries[path] = new FolderHandle(path, false)\n      return dir._entries[path]\n    }, root)\n\n    dir._entries[name] = new FileHandle(file.name, file, false)\n  })\n\n  return new FileSystemDirectoryHandle(root)\n}\n\nexport async function getFileHandlesFromInput (input) {\n  const { FileHandle } = await import('./adapters/memory.js')\n  const { FileSystemFileHandle } = await import('./FileSystemFileHandle.js')\n\n  return Array.from(input.files).map(file =>\n    new FileSystemFileHandle(new FileHandle(file.name, file, false))\n  )\n}\n"],"names":["_construct","Parent","args","Class","Reflect","construct","a","push","apply","instance","Function","bind","prototype","arguments","WritableStream","config","TransformStream","DOMException","Blob","GONE","errors","isSafari","test","window","HTMLElement","safari","WebKitPoint","FileHandle","name","this","kind","other","options","navigator","serviceWorker","getRegistration","sw","link","document","createElement","ts","sink","writable","download","chunks","readable","pipeTo","write","chunk","close","blob","type","href","URL","createObjectURL","click","setTimeout","revokeObjectURL","RemoteWritableStream","readablePort","fileName","encodeURIComponent","replace","escape","headers","size","keepAlive","active","postMessage","pipeThrough","transform","ctrl","Uint8Array","enqueue","reader","Response","body","getReader","pump","_","read","then","e","done","value","finally","clearInterval","url","scope","iframe","hidden","src","appendChild","getWriter","MessagePortSink","port","onmessage","event","_onMessage","data","_port","_resetReady","controller","_controller","_readyPromise","message","buffer","reason","_resolveReady","_onError","error","_rejectReady","Promise","resolve","reject","_readyResolve","_readyReject","_readyPending","catch","channel","MessageChannel","port1","port2","INVALID","MISMATCH","MOD_ERR","SYNTAX","m","SECURITY","DISALLOWED","globalThis","fromDataTransfer","entries","console","warn","all","memory","sandbox","fs","folder","FolderHandle","_entries","map","entry","isFile","FileSystemDirectoryHandle","getDirHandlesFromInput","input","files","Array","from","rootName","webkitRelativePath","split","root","forEach","file","path","shift","pop","reduce","dir","getFileHandlesFromInput","FileSystemFileHandle"],"sourceRoot":""}